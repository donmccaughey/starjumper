.Dd November 10, 2024
.Dt LRND 3
.Os
.Sh NAME
.Nm lrnd_alloc_fake_fixed ,
.Nm lrnd_alloc_fake_sequence ,
.Nm lrnd_alloc_fake_start_step ,
.Nm lrnd_alloc_poor() ,
.Nm lrnd_alloc_nrand48() ,
.Nm lrnd_alloc_rand_r() ,
.Nm lrnd_alloc_random_r() ,
.Nm lrnd_arc4random ,
.Nm lrnd_best ,
.Nm lrnd_free() ,
.Nm lrnd_max_multiple() ,
.Nm lrnd_next() ,
.Nm lrnd_next_uniform() ,
.Nm lrnd_next_uniform_range() ,
.Nm lrnd_lrand48 ,
.Nm lrnd_rand ,
.Nm lrnd_random ,
.Nm lrnd_shuffle
.Nd pluggable random number generators
.Sh LIBRARY
.Lb liblrnd
.Sh SYNOPSIS
.In lrnd.h
.Vt extern struct lrnd *const lrnd_best;
.Vt extern struct lrnd *const lrnd_arc4random;
.Vt extern struct lrnd *const lrnd_lrand48;
.Vt extern struct lrnd *const lrnd_rand;
.Vt extern struct lrnd *const lrnd_random;
.Ft struct lrnd *
.Fn lrnd_alloc_nrand48 "unsigned short seed[3]"
.Ft struct lrnd *
.Fn lrnd_alloc_poor "uint32_t seed"
.Ft struct lrnd *
.Fn lrnd_alloc_rand_r "unsigned int seed"
.Ft struct lrnd *
.Fn lrnd_alloc_random_r "size_t state_array_size" "unsigned int seed"
.Ft struct lrnd *
.Fn lrnd_alloc_fake_fixed "uint32_t value"
.Ft struct lrnd *
.Fn lrnd_alloc_fake_sequence "uint32_t const values[]" "int count"
.Ft struct lrnd *
.Fn lrnd_alloc_fake_start_step "uint32_t start" "int32_t step"
.Ft void
.Fn lrnd_free "struct lrnd *lrnd"
.Ft uint32_t
.Fn lrnd_next "struct lrnd *lrnd"
.Ft uint32_t
.Fn lrnd_next_uniform "struct lrnd *lrnd" "uint32_t range_max"
.Ft uint32_t
.Fn lrnd_next_uniform_range "struct lrnd *lrnd" "uint32_t range_min" "uint32_t range_max"
.Ft void
.Fn lrnd_shuffle "struct lrnd *lrnd" "void *items" "int item_count" "size_t item_size"
.Ft uint32_t
.Fn lrnd_max_multiple "uint32_t generator_max" "uint32_t range_max"
.Sh DESCRIPTION
The
.Va lrnd_best
global variable points to the "best" random number generator available on the
system.
This will be the
.Sy arc4random
generator if available, otherwise the
.Sy lrand48
generator is used.
.Pp
The
.Va lrnd_arc4random
global variable points to an instance of the
.Sy arc4random
generator.
The
.Va lrnd_lrand48
global variable points to an instance of the
.Sy lrand48
generator.
The
.Va lrnd_rand
global variable points to a global instance of the
.Sy rand
generator.
The
.Va lrnd_random
global variable points to an instance of the
.Sy random
generator.
.Pp
These global generators seed themselves with bytes from
.Xr getentropy 2 ,
.Xr getentropy 3
or
.Xr urandom 4
before first use and periodically reseed themselves.
.Pp
The
.Fn lrnd_alloc_nrand48
function allocates a new instance of the
.Sy nrand48
generator with initial state given by
.Fa seed .
.Pp
The
.Fn lrnd_alloc_poor
function allocates a new instance of the
.Sy poor
generator with initial state given by
.Fa seed .
.Pp
The
.Fn lrnd_alloc_rand_r
function allocates a new instance of the
.Sy rand_r()
generator with initial state given by
.Fa seed .
.Pp
The
.Fn lrnd_alloc_random_r
function allocates a new instance of the
.Sy random_r()
generator, allocates a state array of
.Fa state_array_size
size and sets the initial state using the given
.Fa seed .
.Pp
The
.Fn lrnd_alloc_fake_fixed
function allocates a new instance of a generator that always returns the given
value.
.Pp
The
.Fn lrnd_alloc_fake_sequence
function allocates a new instance of a generator that returns values from the
given sequence, repeating from the start after reaching the end.
.Pp
The
.Fn lrnd_alloc_fake_start_step
function allocates a new instance of a generator that returns a sequence of
ascending, descending or fixed values starting from
.Fa initial_value
and changing by
.Fa step
after each value is generated.
.Pp
The
.Fn lrnd_free
function releases a generator allocated by one of the
.Fn lrnd_alloc_
functions.
It can also be safely called on the global generators with no effect.
.Pp
The
.Fn lrnd_next
function generates the next random value from the given generator.
.Pp
The
.Fn lrnd_next_uniform
function generates the next random value in the range [0,
.Fa range_max ]
from the given generator.
.Pp
The
.Fn lrnd_next_uniform_range
function generates the next random value in the range
.Fa [ range_min ,
.Fa range_max ]
from the given generator.
.Pp
The
.Fn lrnd_shuffle
function shuffles an array using the Fisher-Yates algorithm.
.Pp
The
.Fn lrnd_max_multiple
function returns the largest multiple of the range [0,
.Fa range_max ]
that is less than or equal to
.Fa generator_max .
Used in calculating modulo bias when generating a uniform value distribution.
.Sh RETURN VALUES
The
.Fn lrnd_alloc_nrand48 ,
.Fn lrnd_alloc_poor ,
.Fn lrnd_alloc_rand_r ,
.Fn lrnd_alloc_random_r ,
.Fn lrnd_alloc_fake_fixed ,
.Fn lrnd_alloc_fake_sequence
and
.Fn lrnd_alloc_fake_start_step
functions return pointers to their respective generators on success.
On failure these functions call
.Fn abort .
Call
.Sy lrnd_free()
to release the allocated memory.
.Pp
.Fn lrnd_next
returns the next random value.
If
.Fa lrnd
is
.Dv NULL ,
the function returns
.Dv UINT32_MAX
and sets
.Va errno .
.Pp
.Fn lrnd_next_uniform
returns the next uniform random value in the requested range.
If
.Fa lrnd
is
.Dv NULL ,
the function returns
.Fa range_max
and sets
.Va errno .
.Pp
.Fn lrnd_next_uniform_range
returns the next uniform random value in the requested range.
.Fa lrnd
is
.Dv NULL ,
the function returns
.Fa range_max
and sets
.Va errno .
If
.Fa range_min
equals or exceeds
.Fa range_max ,
the function returns
.Fa range_max
and sets
.Va errno .
.Pp
.Fn lrnd_shuffle
sets
.Va errno
if
.Fa lrnd
is
.Dv NULL ,
if
.Fa items
is
.Dv NULL
while
.Fa item_count
is positive, if
.Fa item_count
is negative or exceeds
.Va lrnd->max
or if
.Fa item_size
is zero.
.Pp
.Fn lrnd_max_multiple
returns the largest multiple on success.
.Sh GENERATORS
.Nm lrnd
defines the following generators:
.Bl -dash
.It
.Sy arc4random :
A generator that uses
.Xr arc4random 3 .
Since
.Xr arc4random 3
has global state, the generator is a singleton accessed through the
.Va lrnd_arc4random
global variable.
It generates values in the range [0, UINT32_MAX].
.It
.Sy lrand48 :
A generator that uses
.Xr lrand48 3 .
Since
.Xr lrand48 3
has global state, the generator is a singleton accessed through the
.Va lrnd_lrand48
global variable.
It generates values in the range [0, 0x7fffffff].
.It
.Sy nrand48 :
A generator that uses
.Xr nrand48 3
and local state.
Created by calling
.Fn lrnd_alloc_nrand48 .
It generates values in the range [0, 0x7fffffff].
.It
.Sy poor :
A poor but simple PRNG with local state.
May be useful for testing or where a consistent sequence is needed across different systems.
Created by calling
.Fn lrnd_alloc_poor .
It generates values in the range [0, 0x7fff].
.Pp
The algorithm is taken from the
.Fn myrand
example in the POSIX documentation for
.Fn rand :
.Lk https://pubs.opengroup.org/onlinepubs/9699919799/functions/rand.html
.It
.Sy rand :
A generator that uses
.Xr rand 3 .
Often backed by a poor PRNG with a limited range.
Since
.Xr rand 3
has global state, the generator is a singleton accessed through the
.Va lrnd_rand
global variable.
It generates values in the range [0, RAND_MAX].
.It
.Sy rand_r :
A generator that uses
.Xr rand_r 3 .
Often backed by the same poor PRNG as
.Xr rand 3 ,
but has local state.
Created by calling
.Fn lrnd_alloc_rand_r .
It generates values in the range [0, RAND_MAX].
.It
.Sy random :
A generator that uses
.Xr random 3 .
Since
.Xr random 3
has global state, the generator is a singleton accessed through the
.Va lrnd_random
global variable.
It generates values in the range [0, 0x7fffffff].
.It
.Sy random_r :
A generator that uses
.Xr random_r 3
and local state.
Created by calling
.Fn lrnd_alloc_random_r .
The
.Fa state_array_size
argument should be one of these "optimal" values: 8, 32, 64, 128 or 256, where larger values yield better random numbers.
A value less than 8 is set to 8; other values are rounded down to the nearest "optimal" value.
It generates values in the range [0, 0x7fffffff].
.El
.Sh FAKE GENERATORS
.Nm lrnd
defines the following fake generators for testing:
.Bl -dash
.It
.Sy fake_fixed :
A generator that always returns a given value.
.It
.Sy fake_sequence :
A generator that returns values from a given sequence, repeating the sequence
from the start after reaching the end.
.It
.Sy fake_start_step :
A generator that returns a sequence of ascending, descending or fixed values
starting from
.Fa start
and changing by
.Fa step
after each value is generated.
.El
.Sh SEE ALSO
.Xr abort 3 ,
.Xr arc4random 3 ,
.Xr lrand48 3 ,
.Xr nrand48 3 ,
.Xr rand 3 ,
.Xr rand_r 3 ,
.Xr random 3 ,
.Xr random_r 3
.Sh AUTHORS
.An Don McCaughey
